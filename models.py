# generated by datamodel-codegen:
#   filename:  v4.json
#   timestamp: 2025-09-28T15:23:47+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Dict, List, Optional

from msgspec import Meta, Struct, field


class Audiofile(Struct, kw_only=True):
    url: Optional[str] = None
    duration: Optional[float] = None
    format: Optional[str] = None
    segments: Optional[List[Dict[str, Any]]] = None


class Author(Struct, kw_only=True):
    name: Optional[str] = None
    id: Optional[float] = None


class ChapterInfo(Struct, kw_only=True):
    chapter_id: Optional[float] = None
    text: Optional[
        Annotated[
            str,
            Meta(
                description='Long text of chapter info, this could include html tags for formatting and styling.'
            ),
        ]
    ] = None
    short_text: Optional[str] = None
    language_name: Optional[str] = None
    source: Optional[
        Annotated[
            str,
            Meta(description='Name of the source, could be a book name or site name.'),
        ]
    ] = None


class MediaContent(Struct, kw_only=True):
    url: Optional[str] = None
    embed_text: Optional[str] = None
    provider: Optional[str] = None
    author_name: Optional[str] = None


class TranslatedName1(Struct, kw_only=True):
    name: Optional[str] = None
    language_name: Optional[str] = None


class Recitation(Struct, kw_only=True):
    id: Optional[int] = None
    reciter_name: Optional[str] = None
    style: Optional[str] = None
    translated_name: Optional[TranslatedName1] = None


class Tafsir(Struct, kw_only=True):
    id: Optional[int] = None
    verse_id: Optional[int] = None
    language_id: Optional[int] = None
    text: Optional[str] = None
    language_name: Optional[str] = None
    resource_name: Optional[str] = None
    verse_key: Optional[str] = None
    chapter_id: Optional[int] = None
    verse_number: Optional[int] = None
    juz_number: Optional[int] = None
    hizb_number: Optional[int] = None
    rub_el_hizb_number: Optional[int] = None
    page_number: Optional[int] = None


class TranslatedName(Struct, kw_only=True):
    language_name: Optional[str] = 'english'
    name: Optional[
        Annotated[str, Meta(description='Name of the resource in specific language.')]
    ] = None


class Translation(Struct, kw_only=True):
    resource_id: Optional[int] = None
    resource_name: Optional[str] = None
    id: Optional[int] = None
    text: Optional[
        Annotated[
            str,
            Meta(
                description='Text of the translation, text could have HTML tags for formatting and footnotes. '
            ),
        ]
    ] = None
    verse_id: Optional[int] = None
    language_id: Optional[int] = None
    language_name: Optional[str] = None
    verse_key: Optional[str] = None
    chapter_id: Optional[int] = None
    verse_number: Optional[int] = None
    juz_number: Optional[int] = None
    hizb_number: Optional[int] = None
    rub_number: Optional[int] = None
    page_number: Optional[int] = None


class Transliteration(Struct, kw_only=True):
    language_name: Optional[str] = None
    text: Optional[str] = None


class Translation1(Struct, kw_only=True):
    text: Optional[str] = None
    language_name: Optional[str] = None


class Transliteration1(Struct, kw_only=True):
    text: Optional[str] = None
    language_name: Optional[str] = None


class Word(Struct, kw_only=True):
    id: Optional[int] = None
    position: Optional[
        Annotated[int, Meta(description='Word position within ayah')]
    ] = None
    text_uthmani: Optional[
        Annotated[str, Meta(description='Word text in Uthmanic script')]
    ] = None
    text_indopak: Optional[str] = None
    text_imlaei: Optional[
        Annotated[str, Meta(description='Word text in simple/Imlaei script')]
    ] = None
    verse_key: Optional[str] = None
    page_number: Optional[
        Annotated[
            int,
            Meta(
                description='page_number is deprecated, please use `v1_page` instead.',
                ge=1,
                le=604,
            ),
        ]
    ] = None
    line_number: Optional[
        Annotated[int, Meta(description='Line number in the Mushaf for this word')]
    ] = None
    audio_url: Optional[str] = None
    location: Optional[str] = None
    char_type_name: Optional[str] = None
    code_v1: Optional[
        Annotated[
            str,
            Meta(
                description='glyph code that you can use to render the word using QCF  v1 font.'
            ),
        ]
    ] = None
    code_v2: Optional[
        Annotated[
            str,
            Meta(
                description='glyph code that you can use to render the word using QCF  v2 font.'
            ),
        ]
    ] = None
    translation: Optional[Translation1] = None
    transliteration: Optional[Transliteration1] = None
    v1_page: Optional[
        Annotated[
            int,
            Meta(
                description="Madani Mushaf Page number for v1 font. If `v1_page` value is 2, that means you'll use page 2 font file to render this word using v1 glyph codes.",
                ge=1,
                le=604,
            ),
        ]
    ] = None
    v2_page: Optional[
        Annotated[
            int,
            Meta(
                description="Madani Mushaf Page number for v2 font. If `v2_page` value is 2, that means you'll use page 2 font file to render this ayah using v2 glyph codes.",
                ge=1,
                le=604,
            ),
        ]
    ] = None


class Chapter(Struct, kw_only=True):
    id: Optional[int] = None
    revelation_place: Optional[str] = None
    revelation_order: Optional[int] = None
    bismillah_pre: Optional[bool] = None
    name_complex: Optional[str] = None
    name_arabic: Optional[str] = None
    verses_count: Optional[int] = None
    pages: Optional[List[int]] = None
    translated_name: Optional[TranslatedName] = None


class TranslatedName2(Struct, kw_only=True):
    name: Optional[str] = None
    language_name: Optional[str] = None


class Resource(Struct, kw_only=True):
    id: Optional[int] = None
    name: Optional[str] = None
    author_name: Optional[str] = None
    slug: Optional[str] = None
    language_name: Optional[str] = None
    translated_name: Optional[TranslatedName2] = None


class Pagination(Struct, kw_only=True):
    per_page: Optional[Annotated[int, Meta(description='Entries per api call')]] = None
    current_page: Optional[Annotated[int, Meta(description='')]] = None
    next_page: Optional[
        Annotated[int, Meta(description='Next page in paginated result')]
    ] = None
    total_pages_: Optional[
        Annotated[int, Meta(description='Total number of pages')]
    ] = field(name='total_pages=', default=None)
    total_records_: Optional[int] = field(name='total_records=', default=None)


class VerseMapping(Struct, kw_only=True):
    field_1: Optional[str] = field(name='1', default=None)
    field_2: Optional[str] = field(name='2', default=None)


class Juz(Struct, kw_only=True):
    id: Optional[int] = None
    juz_number: Optional[Annotated[int, Meta(description='', ge=1, le=30)]] = None
    first_verse_id: Optional[
        Annotated[int, Meta(description='Id of the first ayah in this juz.')]
    ] = None
    last_verse_id: Optional[
        Annotated[int, Meta(description='Id of the last ayah in this juz.')]
    ] = None
    verses_count: Optional[
        Annotated[int, Meta(description='total verses in this juz')]
    ] = None
    verse_mapping: Optional[
        Annotated[
            VerseMapping,
            Meta(
                description='Mapping of surah and range of ayah each juz has. \n\nverse_mapping: {"1: "1-7", "2": "1-141"}\n\nmeans this juz has 1-7 ayah of first surah, then 1-141 ayah of second surah.'
            ),
        ]
    ] = None


class ChapterRecitation(Struct, kw_only=True):
    id: Optional[Annotated[int, Meta(description='The Id of the audio file')]] = None
    chapter_id: Optional[Annotated[int, Meta(description='The chapter id')]] = None
    file_size: Optional[Annotated[int, Meta(description='The file size in bytes')]] = (
        None
    )
    format: Optional[Annotated[str, Meta(description='The format of the file')]] = None
    total_files: Optional[
        Annotated[int, Meta(description='The total number of files')]
    ] = None
    audio_url: Optional[Annotated[str, Meta(description="The audio file's url")]] = None


class ChapterReciters(Struct, kw_only=True):
    id: Optional[Annotated[int, Meta(description='Reciter ID')]] = None
    name: Optional[Annotated[str, Meta(description='Name of reciter in English')]] = (
        None
    )
    arabic_name: Optional[
        Annotated[str, Meta(description='Reciter name in Arabic ')]
    ] = None
    relative_path: Optional[str] = None
    format: Optional[Annotated[str, Meta(description='Audio files format')]] = 'mp3'
    files_size: Optional[
        Annotated[float, Meta(description='Total size of all audio files in KBs')]
    ] = None


class Type(Enum):
    gateway_timeout = 'gateway_timeout'
    service_unavailable = 'service_unavailable'
    bad_gateway = 'bad_gateway'
    internal_server_error = 'internal_server_error'
    unprocessable_entity = 'unprocessable_entity'
    not_found = 'not_found'
    forbidden = 'forbidden'
    unauthorized = 'unauthorized'
    invalid_request = 'invalid_request'
    invalid_token = 'invalid_token'
    insufficient_scope = 'insufficient_scope'
    service_error = 'service_error'
    invalid_path = 'invalid_path'
    rate_limit_exceeded = 'rate_limit_exceeded'


class CommonErrorResponse(Struct, kw_only=True):
    message: Optional[str] = None
    type: Optional[Type] = None
    success: Optional[bool] = None


InvalidRequestResponse = Optional[CommonErrorResponse]


UnauthorizedResponse = Optional[CommonErrorResponse]


ForbiddenResponse = Optional[CommonErrorResponse]


NotFoundResponse = Optional[CommonErrorResponse]


UnprocessableEntityResponse = Optional[CommonErrorResponse]


InternalServerErrorResponse = Optional[CommonErrorResponse]


BadGatewayResponse = Optional[CommonErrorResponse]


ServiceUnavailableResponse = Optional[CommonErrorResponse]


GatewayTimeoutResponse = Optional[CommonErrorResponse]


RateLimitExceededResponse = Optional[CommonErrorResponse]


class Language(Struct, kw_only=True):
    id: Optional[float] = None
    name: Optional[str] = None
    native_name: Optional[str] = None
    iso_code: Optional[
        Annotated[
            str,
            Meta(
                description="iso code of the language, you'll pass this code in api calls for fetching content in specific language."
            ),
        ]
    ] = None
    direction: Optional[str] = None
    translated_names: Optional[List[TranslatedName]] = None


class Verse(Struct, kw_only=True):
    id: Optional[int] = None
    chapter_id: Optional[
        Annotated[int, Meta(description='Chapter number of this verse')]
    ] = None
    verse_number: Optional[int] = None
    verse_key: Optional[
        Annotated[
            str,
            Meta(
                description='key of the verse, key is generated using chapter number and ayah number. e.g 1:1 is first ayah of first surah.'
            ),
        ]
    ] = None
    verse_index: Optional[int] = None
    text_uthmani: Optional[
        Annotated[
            str,
            Meta(
                description='Ayah text in Uthmani Script.\n\nUthmani script is an old-fashion script used by the third Caliph, Uthman, to produce the first standard quran manuscript.'
            ),
        ]
    ] = None
    text_uthmani_simple: Optional[
        Annotated[str, Meta(description='Uthmani script diacritic marks ')]
    ] = None
    text_imlaei: Optional[
        Annotated[
            str,
            Meta(
                description="Ayah text in Imla'ei script.\n\nImla'ei script, is the modern Arabic writing style which is currently in use."
            ),
        ]
    ] = None
    text_imlaei_simple: Optional[str] = None
    text_indopak: Optional[str] = None
    text_uthmani_tajweed: Optional[str] = None
    juz_number: Optional[int] = None
    hizb_number: Optional[int] = None
    rub_number: Optional[int] = None
    page_number: Optional[
        Annotated[
            int,
            Meta(
                description='page_number is deprecated, please use `v1_page` instead.',
                ge=1,
                le=604,
            ),
        ]
    ] = None
    image_url: Optional[str] = None
    image_width: Optional[int] = None
    words: Optional[List[Word]] = None
    audio: Optional[Audiofile] = None
    translations: Optional[List[Translation]] = None
    code_v1: Optional[
        Annotated[str, Meta(description='Glyphs codes for QCF v1 fonts')]
    ] = None
    code_v2: Optional[
        Annotated[str, Meta(description='Glyphs codes for QCF v2 fonts')]
    ] = None
    v1_page: Optional[
        Annotated[
            int,
            Meta(
                description="Madani Mushaf Page number for v1 font. If `v1_page` value is 2, that means you'll use page 2 font file to render this ayah using v1 glyph codes.",
                ge=1,
                le=604,
            ),
        ]
    ] = None
    v2_page: Optional[
        Annotated[
            int,
            Meta(
                description="Madani Mushaf Page number for v2 font. If `v2_page` value is 2, that means you'll use page 2 font file to render this ayah using v2 glyph codes.",
                ge=1,
                le=604,
            ),
        ]
    ] = None
